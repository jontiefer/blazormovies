@page "/people"
@inject IPersonRepository personRepository
@inject NavigationManager navigationManager

<h3>Index People</h3>

<div class="form-group">
    <a class="btn btn-info" href="person/create">New Person</a>
</div>

<Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages"
            SelectedPage="SelectedPage" />

<GenericList List="People">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in People)
                {
                    <tr>
                        <td>
                            @*<a class="btn btn-success" href="/person/edit/@item.Id">Edit</a>*@
                            <a class="btn btn-success" href="" @onclick="() => EditPerson(item.Id)" @onclick:preventDefault>Edit</a>
                            <button class="btn btn-danger" @onclick="(() => DeletePerson(item.Id))">Delete</button>
                        </td>
                        <td>@item.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </WholeListTemplate>
</GenericList>

@code {
    List<Person> People;
    PaginationDTO paginationDTO = new PaginationDTO();
    private int totalAmountPages;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadPeople();
        }
        catch (Exception ex)
        {

        }
    }

    private async Task LoadPeople()
    {
        var paginatedResponse = await personRepository.GetPeople(paginationDTO);
        People = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadPeople();
    }

    private void EditPerson(int id)
    {
        navigationManager.NavigateTo($"/person/edit/{id}", forceLoad: true);
    }

    private async Task DeletePerson(int id)
    {
        await personRepository.DeletePerson(id);
        await LoadPeople();
    }
}